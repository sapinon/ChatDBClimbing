import os
import re

from sqlalchemy import inspect
from db import engine, run_sql_query  # Assurez-vous que le fichier db.py contient bien l'engine
from openai import OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def get_completion(prompt, model, temperature=0.1):
    try:
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        llm_resp = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature = temperature
        )
        llm_resp = llm_resp.choices[0].message.content.strip()
        return llm_resp
    except Exception as e:
        print(llm_resp)

        return f"‚ùå Erreur lors de l'appel au mod√®le : {e}."

    return llm_resp

def prompt_correction(query, error_msg, full_schema):
    prompt_correction = f"""
    La requ√™te SQL suivante a provoqu√© une erreur lorsqu'on l'a ex√©cut√©e :
    ```sql
    {query}
    Message d‚Äôerreur retourn√© : ¬´ {error_msg} ¬ª

    Voici le sch√©ma des tables disponible pour m‚Äôassurer que la correction est valide :
    {full_schema}
    
    Merci de proposer une version corrig√©e de cette requ√™te SQL PostgreSQL, compatible avec les types de donn√©es en place. Ne modifie que ce qui est n√©cessaire pour lever l‚Äôerreur, et conserve l‚Äôobjectif m√©tier (par exemple, calculer la dur√©e moyenne de session en heures). Ta r√©ponse doit contenir uniquement la requ√™te corrig√©e dans un bloc sql ; pas d‚Äôexplication superflue.
    """

    return prompt_correction


def execute_auto_fixing_sql(query, full_schema, max_attempts=3):
    if query:
        corrected_query = query
        attempts = 0
        while attempts < max_attempts:
            try:
                results = run_sql_query(corrected_query)
                return results
            except Exception as exec_error:
                attempts += 1
                error_msg = str(exec_error)

                if attempts >= max_attempts:
                    final_answer = (
                        f"‚ùå Impossible d'ex√©cuter la requ√™te apr√®s {max_attempts} tentatives.\n"
                        f"Derni√®re requ√™te SQL :\n```sql\n{corrected_query}\n```\n"
                        f"Message d'erreur : {error_msg}"
                    )
                    return final_answer
                else:
                    try:
                        pc = prompt_correction(query, error_msg, full_schema)
                        llm_resp = get_completion(pc, model="gpt-4.1", temperature=0)
                        sql_match = re.search(r"```sql\s*([\s\S]+?)```", llm_resp, re.IGNORECASE)
                        if sql_match:
                            corrected_query = sql_match.group(1).strip()
                        else:
                            # Si le LLM ne renvoie pas de bloc SQL, on abandonne
                            final_answer = (
                                "‚ùå Le mod√®le n'a pas renvoy√© de requ√™te SQL valide en r√©ponse au message d'erreur.\n"
                                f"R√©ponse du mod√®le : {llm_resp}"
                            )
                            return final_answer
                    except Exception as exec_2:
                        final_answer = (
                            f"‚ùå Erreur lors de la correction automatique : {exec_2}\n"
                            f"Requ√™te SQL actuelle :\n```sql\n{corrected_query}\n```"
                        )
                        print(final_answer)
                        return final_answer


#Va d√©finir le prompt qui explique les data disponibles
def get_schema_description():
    inspector = inspect(engine)

    # üß† Description business explicite
    intro_text = """
Cette base de donn√©es mod√©lise l‚Äôactivit√© d‚Äôune organisation g√©rant plusieurs salles d‚Äôescalade.
Elle permet de suivre les visites des grimpeurs, leurs tentatives d‚Äôescalade, les caract√©ristiques des voies, ainsi que les profils des grimpeurs et leurs abonnements.

Elle est compos√©e de deux tables de faits : Fact_VISIT_TRX (enregistre les visites en salle); Fact_RT_CLMB_LOG (enregistre les tentatives d‚Äôescalade sur les voies)
Et de cinq tables de dimensions : DIM_TIME (informations temporelles); DIM_MBS (types d‚Äôabonnement); DIM_CLMBR_PRFL (profils des grimpeurs); DIM_GYM (salles d‚Äôescalade); DIM_RT_CATLG (caract√©ristiques des voies)

Liens entre les tables :
- DIM_CLMBR_PRFL est li√©e √† DIM_MBS via mem_type_cd, √† Fact_VISIT_TRX et Fact_RT_CLMB_LOG via user_id
- Fact_VISIT_TRX est li√©e √† DIM_GYM via gym_id et √† DIM_TIME via visit_date
- Fact_RT_CLMB_LOG est li√©e √† Fact_VISIT_TRX via visit_id et √† DIM_RT_CATLG via rt_id
- DIM_RT_CATLG est li√©e √† DIM_GYM via gym_id
"""
    schema_text = "\nüìò Sch√©ma technique des tables s√©mantiques :\n"
    for table_name in ["definition_business_colonnes", "business_values_labels"]:
        if table_name in inspector.get_table_names():
            schema_text += f"\nüóÇ Table: \"{table_name}\"\n"
            columns = inspector.get_columns(table_name)
            for column in columns:
                schema_text += f"  - \"{column['name']}\" ({column['type']})\n"

    return intro_text + schema_text
