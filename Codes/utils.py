from sqlalchemy import inspect
from db import engine  # Assurez-vous que le fichier db.py contient bien l'engine



#Va dÃ©finir le prompt qui explique les data disponibles
def get_schema_description():
    inspector = inspect(engine)

    # ðŸ§  Description business explicite
    intro_text = """
Cette base de donnÃ©es modÃ©lise lâ€™activitÃ© dâ€™une organisation gÃ©rant plusieurs salles dâ€™escalade.
Elle permet de suivre les visites des grimpeurs, leurs tentatives dâ€™escalade, les caractÃ©ristiques des voies, ainsi que les profils des grimpeurs et leurs abonnements.

Elle est composÃ©e de deux tables de faits : Fact_VISIT_TRX (enregistre les visites en salle); Fact_RT_CLMB_LOG (enregistre les tentatives dâ€™escalade sur les voies)
Et de cinq tables de dimensions : DIM_TIME (informations temporelles); DIM_MBS (types dâ€™abonnement); DIM_CLMBR_PRFL (profils des grimpeurs); DIM_GYM (salles dâ€™escalade); DIM_RT_CATLG (caractÃ©ristiques des voies)

Liens entre les tables :
- DIM_CLMBR_PRFL est liÃ©e Ã  DIM_MBS via mem_type_cd, Ã  Fact_VISIT_TRX et Fact_RT_CLMB_LOG via user_id
- Fact_VISIT_TRX est liÃ©e Ã  DIM_GYM via gym_id et Ã  DIM_TIME via visit_date
- Fact_RT_CLMB_LOG est liÃ©e Ã  Fact_VISIT_TRX via visit_id et Ã  DIM_RT_CATLG via rt_id
- DIM_RT_CATLG est liÃ©e Ã  DIM_GYM via gym_id
"""
    schema_text = "\nðŸ“˜ SchÃ©ma technique des tables sÃ©mantiques :\n"
    for table_name in ["definition_business_colonnes", "business_values_labels"]:
        if table_name in inspector.get_table_names():
            schema_text += f"\nðŸ—‚ Table: \"{table_name}\"\n"
            columns = inspector.get_columns(table_name)
            for column in columns:
                schema_text += f"  - \"{column['name']}\" ({column['type']})\n"

    return intro_text + schema_text
